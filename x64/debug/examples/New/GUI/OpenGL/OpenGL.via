application PE GUI entry CreateGL;

include "Windows.inc"; library "lib\opengl32.lib";

const GL_QUADS = $0007;
const GL_COLOR_BUFFER_BIT = $00004000;

dword hdc,hrc;
single rotate=0.6;

MSG myMsg; RECT rc; WNDCLASS wc; PIXELFORMATDESCRIPTOR pfd;

func DoEvents();
	if(PeekMessage(myMsg,0,0,0,FALSE)=TRUE) {
		TranslateMessage(myMsg);
		DispatchMessage(myMsg);
	}
end;

func DialogProc(dword hwnd,dword wmsg,dword wparam,dword lparam);
	if (wmsg = WM_CLOSE) {
		PostQuitMessage(0);
	}
	if(wmsg=WM_CREATE){
		hdc = GetDC(hwnd);
		with pfd {
			.nVersion = 1;
			.dwFlags = PFD_SUPPORT_OPENGL or \
					  PFD_DOUBLEBUFFER or \
					  PFD_DRAW_TO_WINDOW;
			.dwLayerMask = PFD_MAIN_PLANE;
			.iPixelType = PFD_TYPE_RGBA;
			.cColorBits = 16;
			.cDepthBits = 16;
			.cAccumBits = 0;
			.cStencilBits = 0;
		}
		SetPixelFormat(hdc,ChoosePixelFormat(hdc,pfd),pfd);
		hrc = wglCreateContext(hdc);
		wglMakeCurrent(hdc,hrc);
		GetClientRect(hwnd,rc);
		glViewport(0,0,rc.right,rc.bottom);
	}
	if(wmsg=WM_SIZE) {
		GetClientRect(hwnd,rc);
		glViewport(0,0,rc.right,rc.bottom);
		InvalidateRect(hwnd,NULL,FALSE);
	}
	if(wmsg=WM_PAINT) {
		glClear(GL_COLOR_BUFFER_BIT);
		glRotatef(rotate,0.0,0.0,1.0);
		glBegin(GL_QUADS);
		glColor3f(40.0,0.0,0.0);  glVertex3f(-0.6,-0.6,0.0);
		glColor3f(0.0,40.0,0.0);  glVertex3f(0.6,-0.6,0.0);
		glColor3f(0.0,0.0,40.0);  glVertex3f(0.6,0.6,0.0);
		glColor3f(40.0,40.0,0.0); glVertex3f(-0.6,0.6,0.0); 
		glEnd();
		SwapBuffers(hdc);
	}
	return(DefWindowProc(hwnd,wmsg,wparam,lparam));
end;

func CreateGL();
	var dword hDialog;
	with wc {
		.style = $2+$1+$80;
		.lpfnWndProc = @DialogProc;
		.cbClsExtra = 0;
		.cbWndExtra = 0;
		.hInstance = Instance;
		.hIcon = LoadIcon(0,IDI_APPLICATION);
		.hCursor = LoadCursor(0,IDC_ARROW);
		.hbrBackground = 15+1;
		.lpszMenuName = "";
		.lpszClassName = "DialogClass";
	}

	RegisterClass(wc);

	hDialog	= CreateWindowEx(0,"DialogClass","Linley OpenGL Example", \
			  		     WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | \
					     WS_MINIMIZEBOX | WS_MAXIMIZEBOX | WS_THICKFRAME, \
					     200, 150, 400, 400, 0, 0, 0, 0);
	
	ShowWindow(hDialog,SW_SHOWNORMAL);

msgloop:
	InvalidateRect(hDialog,0,FALSE);
	if (GetMessage(myMsg,0,0,0)<>0) {
		TranslateMessage(myMsg);
		DispatchMessage(myMsg);
		DoEvents();
		goto msgloop;
	}

	UnregisterClass("DialogClass",0);
end;

